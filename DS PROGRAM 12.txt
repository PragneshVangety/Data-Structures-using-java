12.1 BEST FIRST SEARCH

import java.util.*;

public class BestFirstSearch {

    
    public static Map<Character, List<Map.Entry<Character, Integer>>> convertToAdjacencyListWithCosts(char[][] edges) {
        Map<Character, List<Map.Entry<Character, Integer>>> adjacencyList = new HashMap<>();
        for (char[] edge : edges) {
            char u = edge[0];  
            char v = edge[1];  
            int cost = edge[2]; 

            adjacencyList.putIfAbsent(u, new ArrayList<>());
            adjacencyList.putIfAbsent(v, new ArrayList<>());

            adjacencyList.get(u).add(Map.entry(v, cost));
            adjacencyList.get(v).add(Map.entry(u, cost)); 
        }
        return adjacencyList;
    }

    
    public static void bestFirstSearch(Map<Character, List<Map.Entry<Character, Integer>>> graph, char start, char goal) {
        
        PriorityQueue<Map.Entry<Character, Integer>> pq = new PriorityQueue<>(Comparator.comparingInt(Map.Entry::getValue));
        Set<Character> visited = new HashSet<>();

        
        pq.add(Map.entry(start, 0));

        System.out.print("Best First Search Path: ");
        while (!pq.isEmpty()) {
            
            Map.Entry<Character, Integer> current = pq.poll();
            char currentNode = current.getKey();

            
            System.out.print(currentNode + " ");
            if (currentNode == goal) {
                System.out.println("\nGoal node " + goal + " found!");
                return;
            }

            
            if (visited.contains(currentNode)) {
                continue;
            }
            visited.add(currentNode);

            
            for (Map.Entry<Character, Integer> neighbor : graph.getOrDefault(currentNode, new ArrayList<>())) {
                char nextNode = neighbor.getKey();
                int cost = neighbor.getValue();

                if (!visited.contains(nextNode)) {
                    pq.add(Map.entry(nextNode, cost));
                }
            }
        }

        System.out.println("\nGoal node " + goal + " not reachable.");
    }

    public static void main(String[] args) {
        
        char[][] edges = {
            {'A', 'B', 3},
            {'A', 'C', 1},
            {'B', 'D', 4},
            {'C', 'E', 2},
            {'D', 'E', 5},
            {'E', 'F', 6}
        };

        
        Map<Character, List<Map.Entry<Character, Integer>>> graph = convertToAdjacencyListWithCosts(edges);

        
        char start = 'A';
        char goal = 'F';
        bestFirstSearch(graph, start, goal);
    }
}
=================================================
12.2 DFS GRAPH WITH CHARACTERS

import java.util.*;

public class DFSGraphWithCharacters {
    
    public static Map<Character, List<Character>> convertToAdjacencyList(char[][] edges) {
        Map<Character, List<Character>> adjacencyList = new HashMap<>();
        for (char[] edge : edges) {
            adjacencyList.putIfAbsent(edge[0], new ArrayList<>());
            adjacencyList.putIfAbsent(edge[1], new ArrayList<>());
            adjacencyList.get(edge[0]).add(edge[1]);
            adjacencyList.get(edge[1]).add(edge[0]); 
        }
        return adjacencyList;
    }

    public static void dfsIterative(Map<Character, List<Character>> graph, char source) {
        Set<Character> visited = new HashSet<>();
        Stack<Character> stack = new Stack<>();
        stack.push(source);

        System.out.print("DFS Traversal (Iterative): ");
        while (!stack.isEmpty()) {
            char current = stack.pop();
            if (!visited.contains(current)) {
                visited.add(current);
                System.out.print(current + " ");
                
                for (char neighbor : graph.get(current)) {
                    if (!visited.contains(neighbor)) {
                        stack.push(neighbor);
                    }
                }
            }
        }
    }

    public static void main(String[] args) {
        
        char[][] edges = {
            {'A', 'B'}, {'A', 'C'}, {'B', 'D'}, {'B', 'E'}, {'C', 'F'}, {'C', 'G'}
        };

        
        Map<Character, List<Character>> adjacencyList = convertToAdjacencyList(edges);

        
        System.out.println("Adjacency List: " + adjacencyList);

        
        System.out.println();
        dfsIterative(adjacencyList, 'A');
    }
}
===================================================
12.3 DFS GRAPH

import java.util.*;

public class DFSGraph {
    
    public static Map<Integer, List<Integer>> convertToAdjacencyList(int[][] edges, int numVertices) {
        Map<Integer, List<Integer>> adjacencyList = new HashMap<>();
        for (int i = 0; i < numVertices; i++) {
            adjacencyList.put(i, new ArrayList<>());
        }
        for (int[] edge : edges) {
            adjacencyList.get(edge[0]).add(edge[1]);
            adjacencyList.get(edge[1]).add(edge[0]); 
        }
        return adjacencyList;
    }

    
    public static void dfsIterative(Map<Integer, List<Integer>> graph, int source) {
        boolean[] visited = new boolean[graph.size()];
        Stack<Integer> stack = new Stack<>();
        stack.push(source);

        System.out.print("DFS Traversal (Iterative): ");
        while (!stack.isEmpty()) {
            int current = stack.pop();
            if (!visited[current]) {
                visited[current] = true;
                System.out.print(current + " ");
                
                for (int neighbor : graph.get(current)) {
                    if (!visited[neighbor]) {
                        stack.push(neighbor);
                    }
                }
            }
        }
    }

    public static void main(String[] args) {
        
        int[][] edges = {
            {0, 1}, {0, 2}, {1, 3}, {1, 4}, {2, 5}, {2, 6}
        };
        int numVertices = 7; 

        
        Map<Integer, List<Integer>> adjacencyList = convertToAdjacencyList(edges, numVertices);

        
        System.out.println("Adjacency List: " + adjacencyList);

        
              
        System.out.println();
        dfsIterative(adjacencyList, 0);
    }
}
===============================================
12.4 DEPTH FIRST SEARCH DISSCONNECTED

import java.util.*;

public class DepthFirstSearchDisconnected {

    public static Map<Character, List<Character>> convertToAdjacencyList(char[][] edges) {
        Map<Character, List<Character>> adjacencyList = new HashMap<>();
        for (char[] edge : edges) {
            adjacencyList.putIfAbsent(edge[0], new ArrayList<>());
            adjacencyList.putIfAbsent(edge[1], new ArrayList<>());
            adjacencyList.get(edge[0]).add(edge[1]);
            adjacencyList.get(edge[1]).add(edge[0]); 
        }
        return adjacencyList;
    }

    private static void dfs(Map<Character, List<Character>> graph, char node, Set<Character> visited) {
        
        visited.add(node);
        System.out.print(node + " ");

        
        for (char neighbor : graph.getOrDefault(node, new ArrayList<>())) {
            if (!visited.contains(neighbor)) {
                dfs(graph, neighbor, visited);
            }
        }
    }

    
    public static void dfsDisconnected(Map<Character, List<Character>> graph, Set<Character> vertices) {
        Set<Character> visited = new HashSet<>();
        for (char vertex : vertices) {
            if (!visited.contains(vertex)) {
                System.out.print("Component: ");
                dfs(graph, vertex, visited);
                System.out.println(); 
            }
        }
    }

    public static void main(String[] args) {
        
        char[][] edges = {
            {'A', 'B'},
            {'B', 'C'},
            {'D', 'E'},
            {'F', 'G'}
        };

        
        Map<Character, List<Character>> graph = convertToAdjacencyList(edges);

        
        Set<Character> vertices = new HashSet<>();
        for (char[] edge : edges) {
            vertices.add(edge[0]);
            vertices.add(edge[1]);
        }

        
        System.out.println("DFS Traversal of Disconnected Graph:");
        dfsDisconnected(graph, vertices);
    }
}
===================================================
12.5  BFS Graph With Characters

import java.util.*;

public class BFSGraphWithCharacters {
    
    public static Map<Character, List<Character>> convertToAdjacencyList(char[][] edges) {
        Map<Character, List<Character>> adjacencyList = new HashMap<>();
        for (char[] edge : edges) {
            adjacencyList.putIfAbsent(edge[0], new ArrayList<>());
            adjacencyList.putIfAbsent(edge[1], new ArrayList<>());
            adjacencyList.get(edge[0]).add(edge[1]);
            adjacencyList.get(edge[1]).add(edge[0]); 
        }
        return adjacencyList;
    }

    
    public static void bfs(Map<Character, List<Character>> graph, char source) {
        Set<Character> visited = new HashSet<>();
        Queue<Character> queue = new LinkedList<>();

        
        queue.offer(source);
        visited.add(source);

        System.out.print("BFS Traversal: ");
        while (!queue.isEmpty()) {
            char current = queue.poll();
            System.out.print(current + " ");

            
            for (char neighbor : graph.get(current)) {
                if (!visited.contains(neighbor)) {
                    queue.offer(neighbor);
                    visited.add(neighbor);
                }
            }
        }
    }

    public static void main(String[] args) {
       
        char[][] edges = {
            {'A', 'B'}, {'A', 'C'}, {'B', 'D'}, {'B', 'E'}, {'C', 'F'}, {'C', 'G'}
        };

        
        Map<Character, List<Character>> adjacencyList = convertToAdjacencyList(edges);

        
        System.out.println("Adjacency List: " + adjacencyList);

       
        bfs(adjacencyList, 'A');
    }
}
==================================================
12.6  BFS GRAPH 

import java.util.*;

public class BFSGraph {
    
    public static Map<Integer, List<Integer>> convertToAdjacencyList(int[][] edges, int numVertices) {
        Map<Integer, List<Integer>> adjacencyList = new HashMap<>();
        for (int i = 0; i < numVertices; i++) {
            adjacencyList.put(i, new ArrayList<>());
        }
        for (int[] edge : edges) {
            adjacencyList.get(edge[0]).add(edge[1]);
            adjacencyList.get(edge[1]).add(edge[0]); 
        }
        return adjacencyList;
    }

    
    public static void bfs(Map<Integer, List<Integer>> graph, int source) {
        boolean[] visited = new boolean[graph.size()];
        Queue<Integer> queue = new LinkedList<>();
        queue.add(source);
        visited[source] = true;

        System.out.print("BFS Traversal: ");
        while (!queue.isEmpty()) {
            int current = queue.poll();
            System.out.print(current + " ");
            for (int neighbor : graph.get(current)) {
                if (!visited[neighbor]) {
                    queue.add(neighbor);
                    visited[neighbor] = true;
                }
            }
        }
    }

    public static void main(String[] args) {
        
        int[][] edges = {
            {0, 1}, {0, 2}, {1, 3}, {1, 4}, {2, 5}, {2, 6}
        };
        int numVertices = 7; 

       
        Map<Integer, List<Integer>> adjacencyList = convertToAdjacencyList(edges, numVertices);

        
        System.out.println("Adjacency List: " + adjacencyList);

        
        int source = 0; 
        bfs(adjacencyList, source);
    }
}

