1.1  Sum of last digits of two given numbers

import java.util.*;
class Main{
    public static int addlastdigit(int P1,int P2){
        int S1=P1%10;
        int S2=P2%10;
        return S1+S2;
    }
	public static void main(String[] args){
	  Scanner sc = new Scanner(System.in);
	  int P1=sc.nextInt();
	  int P2=sc.nextInt();
	  int R=addlastdigit(Math.abs(P1),Math.abs(P2));
	  System.out.println(R);
	}
}
============================================
1.2  Is N an exact multiple of M

import java.util.*;
public class Main{
    public static int exactMultiple(int P1,int P2){
        if(P1==0||P2==0){
            return 3;
        }
        else if(P1%P2==0){
            return 2;
        }
        else
            return 1;
    }
	public static void main(String[] args){
		Scanner sc = new Scanner(System.in);
		int num1=sc.nextInt();
		int num2=sc.nextInt();
		System.out.println(exactMultiple(num1,num2));
	}
}
======================================================
1.3 Combine Strings

import java.util.*;
public class Main
{
    String combine(String X, String Y)
    {
        if(X.length()<Y.length())
        {
            return X+Y+X;
        }
        if(X.length()>Y.length())
        {
            return X+Y+X;
        }
        else
        {
            return Y+X+Y;
        }
    }
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        String X = sc.nextLine();
        String Y = sc.nextLine();
        Main obj = new Main();
        System.out.println(obj.combine(X,Y));
    }
}
==================================================
1.4 Even or Odd

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int num1 = scanner.nextInt();
        int num2 = scanner.nextInt();
        int num3 = scanner.nextInt();
        int num4 = scanner.nextInt();
        int num5 = scanner.nextInt();
        String type = scanner.next();
        int result = countNumbers(num1, num2, num3, num4, num5, type);
        System.out.println(result);
    }

    public static int countNumbers(int num1, int num2, int num3, int num4, int num5, String type) {
        int[] numbers = {num1, num2, num3, num4, num5};
        int count = 0;

        for (int num : numbers) {
            if (type.equals("even") && num % 2 == 0) {
                count++;
            } else if (type.equals("odd") && num % 2 != 0) {
                count++;
            }
        }

        return count;
    }
}
=================================================
1.5 Second last digit of a given number

import java.util.Scanner;
class Main
{
    public static int digits(int num)
    {
        if(num/10==0)
        {
            return -1;
        }
        else
        {
            num = Math.abs(num);
            return (num/10)%10;
        }
    }
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        System.out.println(digits(num));
    }
}
==================================================
1.6  Alternate String Combiner

import java.util.Scanner;
class Main{
    String AlternativeStringCombiner(String s){
	    String arr[]=s.split(",");     
	    String word1=arr[0]; 
	    String word2=arr[1];
	    int min=Math.min(word1.length(),word2.length());
        String r="";
        for(int i=0;i<min;i++){
           r+=(char)word1.charAt(i);
           r+=(char)word2.charAt(i);
        }
        if(word1.length()>word2.length()){
            for(int i=min;i<word1.length();i++){
                r+=(char)word1.charAt(i);
            }
        }
        else{
            for(int i=min;i<word2.length();i++){
                r+=(char)word2.charAt(i);
            }
        }
        return r.toString();
    }
    public static void main(String args[]){
        Main obj=new Main();
        Scanner sc=new Scanner(System.in);
        String s=sc.next();
        System.out.println(obj.AlternativeStringCombiner(s));
    }
}
======================================================
1.7 Padovan Sequence

import java.util.Scanner;
class Main{
	public static int padovan(int n){
	   if(n==0){
	       return 1;
	   }
	   else if(n==1){
	       return 1;
	   }
	   else if(n==2){
	       return 1;
	   }
	   else{
	   return padovan(n-2)+padovan(n-3);
	   }
	    
		//write your code here
	}
	public static void main(String args[]){
	    Scanner sc=new Scanner(System.in);
	    int n=sc.nextInt();
	    for(int i=0;i<=n;i++){
	        System.out.print(padovan(i));
	        if(i<n){
	            System.out.print(" ");
	            
	        }
	    }
	}
}
========================================================
1.8  Leaders in an array

import java.util.Scanner;
import java.util.ArrayList;
public class Main{
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();  
        String[] input = scanner.nextLine().split(", ");
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        findLeaders(arr, n);
        scanner.close();
    }
    public static void findLeaders(int[] arr, int n) {
        ArrayList<Integer> leaders = new ArrayList<>();
        int maxFromRight = arr[n - 1];
        leaders.add(maxFromRight);  
        for (int i = n - 2; i >= 0; i--) {
            if (arr[i] > maxFromRight) {
                maxFromRight = arr[i];
                leaders.add(maxFromRight);  
            }
        }
        for (int i = leaders.size() - 1; i >= 0; i--) {
            System.out.print(leaders.get(i) + " ");
        }
    }
}
===================================================
1.9  Find the Value of a Number Raised to its Reverse

import java.util.Scanner;
public class Main{
    public static final int MOD = 1000000007;
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int R = scanner.nextInt();
        long result = modularExponentiation(N, R, MOD);
        System.out.println(result);
        scanner.close();
    }
    public static long modularExponentiation(int N, int R, int mod) {
        long result = 1;
        long base = N % mod;
        while (R > 0) {
            if (R % 2 == 1) {
                result = (result * base) % mod;
            }
            R = R / 2;
            base = (base * base) % mod;
        }
        return result;
    }
}
========================================================
1.10  Mean of Array using Recursion

import java.util.Scanner;
public class Main{
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine(); 
        int[] arr = new int[n];
        String[] input = scanner.nextLine().split(" ");
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        double mean = findMean(arr, n);
        System.out.println(mean);
        scanner.close();
    }
    public static double findMean(int[] arr, int n) {
        if (n == 1) {
            return arr[0];
        }
        double prevMean = findMean(arr, n - 1);
        double sumOfPrev = prevMean * (n - 1);
        return (sumOfPrev + arr[n - 1]) / n;
    }
}

