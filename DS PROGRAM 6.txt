6.1  MY STACK 

import java.util.LinkedList;
import java.util.Queue;

class MyStack {
    private Queue<Integer> queue;
	public MyStack() {
        queue = new LinkedList<>();
    }
	public void push(int x) {
        queue.add(x);
        int size = queue.size();
        for (int i = 0; i < size - 1; i++) {
            queue.add(queue.remove());
        }
    }
	public int pop() {
        if (empty()) {
            System.out.println("Stack is empty. Cannot pop.");
            return -1; 
        }
        return queue.remove();
    }

    public int top() {
        if (empty()) {
            System.out.println("Stack is empty.");
            return -1; 
        }
        return queue.peek();
    }

    public boolean empty() {
        return queue.isEmpty();
    }

    public static void main(String[] args) {
        MyStack stack = new MyStack();
        
        stack.push(1);
        stack.push(2);
        stack.push(3);

        System.out.println("Top element: " + stack.top()); 
        System.out.println("Popped element: " + stack.pop()); 
        System.out.println("Top element after pop: " + stack.top()); 
        System.out.println("Is stack empty? " + stack.empty()); 
        
        stack.pop(); 
        stack.pop(); 
        System.out.println("Is stack empty after popping all elements? " + stack.empty()); // Should print true
    }
}
=====================================================
6.2  MY QUEUE

import java.util.Stack;

class MyQueue {
    private Stack<Integer> stack1;
    private Stack<Integer> stack2;

    public MyQueue() {
        stack1 = new Stack<>();
        stack2 = new Stack<>();
    }

    public void push(int x) {
        stack1.push(x);
    }

    public int pop() {
        if (stack2.isEmpty()) {
            while (!stack1.isEmpty()) {
                stack2.push(stack1.pop());
            }
        }
        return stack2.pop();
    }

    public int peek() {
        if (stack2.isEmpty()) {
            while (!stack1.isEmpty()) {
                stack2.push(stack1.pop());
            }
        }
        return stack2.peek();
    }

    public boolean empty() {
        return stack1.isEmpty() && stack2.isEmpty();
    }

    public static void main(String[] args) {
        MyQueue myQueue = new MyQueue();
        myQueue.push(1);
        myQueue.push(2);
        System.out.println("Peek: " + myQueue.peek()); 
        System.out.println("Pop: " + myQueue.pop());   
        System.out.println("Empty: " + myQueue.empty()); 
    }
}
===================================================
6.3  CircularQueue

class CircularQueue {
    private int size;
    private int front, rear;
    private int[] queue;

    public CircularQueue(int size) {
        this.size = size;
        this.queue = new int[size];
        this.front = this.rear = -1;
    }

    public void enqueue(int data) {
        if ((rear + 1) % size == front) {
            System.out.println("Queue is full");
        } else {
            if (front == -1) { 
                front = 0;
            }
            rear = (rear + 1) % size;
            queue[rear] = data;
            System.out.println("Enqueued: " + data);
        }
    }

    
    public int dequeue() {
        if (front == -1) { 
            System.out.println("Queue is empty");
            return -1;
        } else {
            int data = queue[front];
            if (front == rear) { 
                front = rear = -1;
            } else {
                front = (front + 1) % size;
            }
            System.out.println("Dequeued: " + data);
            return data;
        }
    }

    
    public void display() {
        if (front == -1) { 
            System.out.println("Queue is empty");
        } else {
            System.out.print("Queue: ");
            int i = front;
            while (true) {
                System.out.print(queue[i] + " ");
                if (i == rear) {
                    break;
                }
                i = (i + 1) % size;
            }
            System.out.println();
        }
    }

    
    public static void main(String[] args) {
        CircularQueue queue = new CircularQueue(5);

        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);
        queue.enqueue(40);
        queue.enqueue(50);

        queue.display();

        queue.dequeue();
        queue.dequeue();

        queue.display();

        queue.enqueue(60);
        queue.enqueue(70);

        queue.display();
    }
}
=====================================================
6.4   Deque Operations

import java.util.ArrayDeque;
import java.util.Deque;

public class DequeOperations {
    private Deque<Integer> deque;

    public DequeOperations() {
        deque = new ArrayDeque<>();
    }
	public void append(int value) {
        deque.addLast(value);
    }
	public void appendLeft(int value) {
        deque.addFirst(value);
    }
	public Integer pop() {
        return deque.pollLast(); 
    }
	public Integer popLeft() {
        return deque.pollFirst(); 
    }

    public int index(int ele) {
        int index = 0;
        for (Integer item : deque) {
            if (item == ele) {
                return index;
            }
            index++;
        }
        return -1; 
    }

	public void remove(int value) {
        deque.removeFirstOccurrence(value);
    }

    public int count(int value) {
        int count = 0;
        for (Integer item : deque) {
            if (item == value) {
                count++;
            }
        }
        return count;
    }

    public int size() {
        return deque.size();
    }

    public Integer getFront() {
        return deque.peekFirst();
    }

    public Integer getBack() {
        return deque.peekLast();
    }

    public void extend(int[] values) {
        for (int value : values) {
            append(value);
        }
    }

    public void extendLeft(int[] values) {
        for (int i = values.length - 1; i >= 0; i--) {
            appendLeft(values[i]);
        }
    }

    public void rotate(int n) {
        if (n > 0) {
            for (int i = 0; i < n; i++) {
                Integer value = pop();
                if (value != null) {
                    appendLeft(value);
                }
            }
        } else {
            for (int i = 0; i < -n; i++) {
                Integer value = popLeft();
                if (value != null) {
                    append(value);
                }
            }
        }
    }

    public void display() {
        System.out.println("Deque: " + deque);
    }

    public static void main(String[] args) {
        DequeOperations dequeOps = new DequeOperations();

        dequeOps.append(1);
        dequeOps.append(2);
        dequeOps.appendLeft(0);
        dequeOps.display();

        dequeOps.pop();
        dequeOps.display();

		dequeOps.remove(2);
        dequeOps.display();

        System.out.println("Count of 1: " + dequeOps.count(1));
        System.out.println("Front: " + dequeOps.getFront());
        System.out.println("Back: " + dequeOps.getBack());

        dequeOps.extend(new int[]{3, 4, 5});
        dequeOps.display();

        dequeOps.extendLeft(new int[]{-1, -2});
        dequeOps.display();

        dequeOps.rotate(2);
        dequeOps.display();
    }
}
====================================================
6.5 LINEAR QUEUE

import java.util.Scanner;

public class LinearQueue {
    static final int MAX = 5; 
    static int[] queue = new int[MAX]; 
    static int front = 0; 
    static int rear = 0; 

    
    public static boolean isEmpty() {
        return front == rear;
    }

    
    public static boolean isFull() {
        return rear == MAX;
    }

    
    public static void enqueue(int item) {
        if (isFull()) {
            System.out.println("Queue is full. Cannot enqueue " + item);
        } else {
            queue[rear++] = item;
            System.out.println("Enqueued: " + item);
        }
    }

    public static void dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot dequeue.");
        } else {
            System.out.println("Dequeued: " + queue[front]);
            front++; 
        }
    }

    
    public static void display() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            System.out.print("Queue elements: ");
            for (int i = front; i < rear; i++) {
                System.out.print(queue[i] + " ");
            }
            System.out.println();
        }
    }

   
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int choice;
        
        do {
            System.out.println("\nQueue Operations:");
            System.out.println("1. Enqueue");
            System.out.println("2. Dequeue");
            System.out.println("3. Display");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            
            switch (choice) {
                case 1:
                    System.out.print("Enter an element to enqueue: ");
                    int item = scanner.nextInt();
                    enqueue(item);
                    break;
                case 2:
                    dequeue();
                    break;
                case 3:
                    display();
                    break;
                case 4:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 4);
        
        scanner.close();
    }
}


